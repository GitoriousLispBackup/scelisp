;;;; SCEngine's model1 example in Lisp
(require :lispbuilder-sdl)
(require :scelisp)
(in-package :scelisp)

(defvar *scene*)
(defvar *camera*)
(defvar *mesh*)
(defvar *model*)
(defvar *light*)

(defun init ()
  (sce-init-interface 0 0)
  (sce-init-geometry)
  ;; Scene & camera
  (setf *scene* (sce-scene-create))
  (setf *camera* (sce-camera-create))
  (sce-scene-addcamera *scene* *camera*)
  ;; Light
  (setf *light* (sce-light-create))
  (sce-light-setcolor *light* 1.0 1.0 1.0)
  (sce-light-infinite *light* t)
  (sce-scene-addlight *scene* *light*)
  ;; Mesh TODO: use relative path
  (setf *mesh* (sce-mesh-load "/home/quentin/sce/samples/model1/spaceship.obj" 2))
  (sce-mesh-autobuild *mesh*)
  ;; Model
  (setf *model* (sce-model-create))
  (sce-model-addentity *model* 0 *mesh* (null-pointer) (null-pointer))
  (sce-model-addnewinstance *model* 0 1 (null-pointer))
  (sce-model-mergeinstances *model*)
  (sce-matrix4-scale (sce-node-getmatrix (sce-model-getrootnode *model*) :node-read-matrix) 0.3 0.3 0.3)
  (sce-matrix4-rotate (sce-node-getmatrix (sce-model-getrootnode *model*) :node-read-matrix) 30.0 1.0 1.0 1.0)
  (sce-scene-addmodel *scene* *model*))

(defun quit ()
  (sce-camera-delete *camera*)
  (sce-scene-delete *scene*)
  (sce-mesh-delete *mesh*)
  (sce-model-delete *model*)
  (sce-light-delete *light*)
  (sce-quit-interface))

(defun draw ()
  (when (sce-error-haveerror)
    (sce-error-out))
  (sce-scene-update *scene* *camera* (null-pointer) 0)
  (sce-scene-render *scene* *camera* (null-pointer) 0))

(defun run ()
  (sdl:with-init ()
    (sdl:window 200 200 :opengl t)
    (setf (sdl:frame-rate) 15)
    (init)
    (sdl:with-events ()
      (:quit-event () t)
      (:idle ()
        (draw)
        (sdl:update-display)))
    (quit)))